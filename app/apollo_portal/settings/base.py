"""
Django settings for apollo_portal project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from dotenv import load_dotenv
from pathlib import Path

from apollo_portal.utils.environment import is_truthy_string
from .logging.config import configure_logging

BASE_DIR = Path(__file__).resolve().parent.parent.parent

env_file = BASE_DIR.parent / '.env'
load_dotenv(env_file)

SECRET_KEY = 'secret'
DEBUG = True

LOG_ROOT = BASE_DIR / 'apollo_portal/logs'
LOG_ROOT.mkdir(exist_ok=True)
LOGGING = configure_logging(LOG_ROOT)

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
    '192.168.1.146',
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'captcha',
    'home',
    'genomes',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'apollo_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'apollo_portal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

SEARCH_INDEX_DIR = BASE_DIR / 'apollo_portal/whoosh_index'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': (
            'django.contrib.auth.password_validation'
            '.UserAttributeSimilarityValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation'
            '.MinimumLengthValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation'
            '.CommonPasswordValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation'
            '.NumericPasswordValidator'
        ),
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


AUTH_USER_MODEL = 'home.User'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'apollo_portal/static'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'apollo_portal/media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('MAIL_HOSTNAME')
EMAIL_PORT = os.environ.get('MAIL_SMTP_PORT')
EMAIL_HOST_USER = os.environ.get('MAIL_SMTP_USERNAME')
EMAIL_HOST_PASSWORD = os.environ.get('MAIL_SMTP_PASSWORD')
EMAIL_USE_TLS = is_truthy_string(os.environ.get('MAIL_USE_TLS'))
# EMAIL_USE_TLS = str(os.environ.get('MAIL_USE_TLS')).lower() in ('1', 'true')
EMAIL_FROM_ADDRESS = os.environ.get('MAIL_FROM_ADDRESS')
EMAIL_TO_ADDRESS = os.environ.get('MAIL_TO_ADDRESS')
SERVER_EMAIL = os.environ.get('MAIL_FROM_ADDRESS')

RECAPTCHA_PUBLIC_KEY = os.environ.get('RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = os.environ.get('RECAPTCHA_PRIVATE_KEY')

# Pages that will be indexed for searching:
SITE_SEARCH_URLS = [
    '/',
    '/about',
    '/signup',
    '/contact',
    '/resources/start',
    '/resources/documentation',
    '/resources/training',
    '/resources/faqs',
    '/resources/video',
    '/resources/terms',
    '/degnan',
    '/degnan/cots',
    '/degnan/amphimedon',
    '/tradis',
    '/tradis/tutorial',
    '/tradis/contact',
    '/genomes',
]
